#!/usr/bin/python
import xml.etree.ElementTree as ET, glob, csv


def getParameter(treeobject,parameter):
	try:
		ret = treeobject.findtext("./"+parameter).strip()
	except:
		ret = ""
	return ret


fields = []
fields.append(["name","Primary identifier of planet"])
fields.append(["binaryflag","Binary flag [0=no known stellar binary companion; 1=P-type binary (circumbinary); 2=S-type binary; 3=orphan planet (no star)]"])
fields.append(["mass","Planetary mass [Jupiter masses]"])
fields.append(["radius","Radius [Jupiter radii]"])
fields.append(["period","Period [days]"])
fields.append(["semimajoraxis","Semi-major axis [Astronomical Units]"])
fields.append(["eccentricity","Eccentricity"])
fields.append(["periastron","Periastron [degree]"])
fields.append(["longitude","Longitude [degree]"])
fields.append(["ascendingnode","Ascending node [degree]"])
fields.append(["inclination","Inclination [degree]"])
fields.append(["temperature","Surface or equilibrium temperature [K]"])
fields.append(["age","Age [Gyr]"])
fields.append(["discoverymethod","Discovery method"])
fields.append(["discoveryyear","Discovery year [yyyy]"])
fields.append(["lastupdate","Last updated [yy/mm/dd]"])
fields.append(["system_rightascension","Right ascension [hh mm ss]"])
fields.append(["system_declination","Declination [+/-dd mm ss]"])
fields.append(["system_distance","Distance from Sun [parsec]"])
fields.append(["hoststar_mass","Host star mass [Solar masses]"])
fields.append(["hoststar_radius","Host star radius [Solar radii]"])
fields.append(["hoststar_metallicity","Host star metallicity [log relative to solar]"])
fields.append(["hoststar_temperature","Host star temperature [K]"])
fields.append(["hoststar_age","Host star age [Gyr]"])
fields.append(["list","Which detection status list"])

def outputFilesFromDataset(filename, dataset):
	csvwriters = []
	csvwriters.append(csv.writer(open("comma_separated/"+filename+".txt", "wb"),  delimiter=",", quotechar='"', quoting=csv.QUOTE_MINIMAL))
	csvwriters.append(csv.writer(open("tab_separated/"+filename+".txt", "wb"),  delimiter="\t", quotechar='"', quoting=csv.QUOTE_MINIMAL))

	# headers
	for csvwriter in csvwriters:
		csvwriter.writerow(["# Open Exoplanet Catalogue."])
		csvwriter.writerow(["# https://github.com/hannorein/open_exoplanet_catalogue"])
		csvwriter.writerow(["# "])
		csvwriter.writerow(["# Columns: "])
		csvwriter.writerow(["# "])
		i = 0
		for field in fields:
			i = i + 1
			csvwriter.writerow(["# %2d: " %i + field[1]])

		csvwriter.writerow(["# "])
		


	# Loop over all files and  create new tables
	for filename in glob.glob("open_exoplanet_catalogue/"+dataset+"/*.xml"):
		system = ET.parse(open(filename,'r'))
		planets = system.findall(".//planet")
		stars = system.findall(".//star")

		for planet in planets:
			# Find host star
			hoststar = None
			for star in stars:
				planetsaroundstar = star.findall("./planet")
				if planet in planetsaroundstar:
					hoststar = star

			parameters = []
			for field in fields:
				if field[0]=="binaryflag":
					binaryflag = 0
					# check if planet is circuminary planet
					ptypeplanets = system.findall(".//binary/planet")
					if planet in ptypeplanets:
						binaryflag = 1
					# check if planet is S-type binary planet
					starsinbinaries = system.findall(".//binary/star")
					for starinbinary in starsinbinaries:
						# is host star in a binary?
						if starinbinary == hoststar:
							binaryflag = 2
					# check if planet is an orphan planet
					if len(stars)==0:
						binaryflag = 3
					# first, find host star
					ptypeplanets = system.findall(".//binary/planet")
					if planet in ptypeplanets:
						binaryflag = 1
					parameters.append(binaryflag)	
					continue
				if field[0][0:7]=="system_":
					parameters.append(getParameter(system,field[0][7:]))
					continue
				if field[0][0:9]=="hoststar_":
					parameters.append(getParameter(hoststar,field[0][9:]))
					continue
				else:
					parameters.append(getParameter(planet,field[0]))
					continue
			for csvwriter in csvwriters:
				csvwriter.writerow(parameters)

outputFilesFromDataset("open_exoplanet_catalogue","systems");
outputFilesFromDataset("open_exoplanet_catalogue_kepler","systems_kepler");
